package com.hkmc.ticketauto.controller;
import com.hkmc.ticketauto.cache.ParsedResultData;import com.hkmc.ticketauto.utils.MyLog;import com.splunk.*;import javafx.collections.FXCollections;import javafx.collections.ObservableList;import javafx.concurrent.Task;import javafx.event.ActionEvent;import javafx.event.EventHandler;import javafx.fxml.FXML;import javafx.fxml.Initializable;import javafx.scene.control.ListCell;import javafx.scene.control.ListView;import javafx.scene.control.TextArea;import javafx.scene.input.MouseEvent;import javafx.util.Callback;
import java.io.IOException;import java.io.InputStream;import java.net.URL;import java.util.ResourceBundle;
public class Controller implements Initializable {
    @FXML public TextArea parced_data_textview;    @FXML private ListView<ParsedResultData> rule_name_list;
    private ObservableList<ParsedResultData> listData = FXCollections.observableArrayList();
    public void handle_btn_input_Channel(ActionEvent actionEvent) {//        MyLog.i("handle_btn_input_Channel");    }
    public void handle_btn_load(ActionEvent actionEvent) {//        MyLog.i("handle_btn_input_Channel");    }
    public void handle_btn_inputUrl(ActionEvent actionEvent) {//        MyLog.i("handle_btn_input_Channel");    }
    private boolean stop;
    public void handle_btn_start_ButtonAction(ActionEvent actionEvent) throws InterruptedException {
        rule_name_list.setItems(listData);        parced_data_textview.setWrapText(true);        rule_name_list.setCellFactory(new Callback<ListView<ParsedResultData>, ListCell<ParsedResultData>>() {            @Override            public ListCell<ParsedResultData> call(ListView<ParsedResultData> param) {                ListCell<ParsedResultData> cell = new ListCell<ParsedResultData>() {                    @Override                    protected void updateItem(ParsedResultData item, boolean empty) {                        super.updateItem(item, empty);                        if (item != null) {                            setText(item.getSource());                            /*switch (item.get()) {                                case SERVER_RESPONSE_CODE_0:                                    parced_data_textview.setText(item.getResultCode() + "  " + STATUS_CODE_DEFINITION_0 + "  " + item.getUrl());                                    break;                            }*/                        }                    }
                };                cell.setOnMouseClicked(new EventHandler<MouseEvent>() {                    @Override                    public void handle(MouseEvent event) {                        parced_data_textview.setText(cell.getItem().get_raw());                    }                });                return cell;            }        });        stop = false;        /*Task<Integer> task = new Task<Integer>() {            @Override            protected Integer call() throws Exception {                getSearchResult();                return null;            }        };        Thread thread = new Thread(task);        thread.setDaemon(true);        thread.start();*/        Thread thread = new Thread () {            @Override            public void run() {                super.run();                      getSearchResult();                while (!stop) {                    //can UI change                }            }        };    }
    Job job;    Service service;    String query = "search index=\"notable\" | HEAD 30";    public Controller() throws IOException, InterruptedException {        super();        ServiceArgs loginArgs = new ServiceArgs();        loginArgs.setUsername("9287437");        loginArgs.setPassword("Ahnlab1711!");        loginArgs.setHost("10.18.254.13");        loginArgs.setSSLSecurityProtocol(SSLSecurityProtocol.TLSv1_2);        loginArgs.setPort(8089);        // Create a Service instance and log in with the argument map        service = Service.connect(loginArgs);        System.out.println("\t Success! ");
        jobargs = new JobExportArgs();        jobargs.setSearchMode(JobExportArgs.SearchMode.NORMAL);//        jobargs.setEarliestTime("rt-5m");        jobargs.setEarliestTime("-4h");//        jobargs.setLatestTime("rt");        jobargs.setOutputMode(JobExportArgs.OutputMode.XML);        exportStream = service.export(query, jobargs);        multiResultsReader = new MultiResultsReaderXml(exportStream);    }
    JobExportArgs jobargs;    InputStream exportStream;    MultiResultsReaderXml multiResultsReader;
    @Override    public void initialize(URL location, ResourceBundle resources) {
    }
    private void getSearchResult() {        MyLog.i("getSearchResult!");        try {            for (SearchResults searchResults : multiResultsReader)            {                listData.clear();//                rule_name_list.getItems().clear();                MyLog.i("1");                for (Event event : searchResults) {                    MyLog.i("22");
                    if(event!=null) {                        String raw = event.get("_raw");                        String[] animalsArray = raw.split(",");                        StringBuilder sb = new StringBuilder();                        for (String name : animalsArray) {                            sb.append(name+"\n");                        }                        listData.add(new ParsedResultData(event.get("_bkt"), event.get("_cd"),event.get("_serial"),event.get("splunk_server"),sb.toString(), event.get("source")));                    }                    for (String key: event.keySet()) {//                        System.out.println("   " + key + ":  " + event.get(key));                    }                }            }            MyLog.i("333");            multiResultsReader.close();        } catch (IOException e) {            e.printStackTrace();        }    }}

